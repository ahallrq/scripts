#!/bin/bash

# This is free and unencumbered software released into the public domain.

# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.

# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# For more information, please refer to <http://unlicense.org>

# v1: Initial revision
# v2: Added colour and inversion flags, added usage prompt, modified balance to calculate total based on pending charges (thanks AWindowsKrill).
# Todo: Fix tab/space mixing, clean up code, add flag to disable pending charge calculation

API_KEY="INSERT_API_KEY_HERE"
BAL_MODE=0
COLOUR=0

function print_usage {
        echo "vultrbal usage:"
        echo "-i | --invert-balance: Invert how the balance is shown. i.e 20 dollars credit will be shown as \"\$20\" rather than \"\$-20\"."
	echo "-c | --colour: Enable colours. The balance displays in red, yellow or greed depending on amount."
        echo "-h | --help: Print this usage text."
}

while [[ $# -gt 0 ]];
do
    key="$1"
    case $key in
        -i|--invert-balance)
            BAL_MODE=1; break;;
    	-c|--colour)
	    COLOUR=1; break;;
        -h|--help)
            print_usage; exit ;;
        *)
            print_usage; exit ;;
    esac
done

function balance {
    echo "$"$total
    echo "$"$total
    if [[ "$COLOUR" -eq "1" ]];
    then
        if (( $(bc <<< "$total < -20") ));
        then
            echo "#00FF00"
        elif (( $(bc <<< "$total > 0") ));
        then
            echo "#FF0000"
        else
            echo "#FFFF00"
        fi
    fi
}

function invbalance {
    invtotal=$(bc <<< "(-1*($total))")
    echo "$"$invtotal
    echo "$"$invtotal
    if [[ "$COLOUR" -eq "1" ]];
    then
	if (( $(bc <<< "$invtotal > 20") ));
	then
	    echo "#00FF00"
        elif (( $(bc <<< "$invtotal < 0") ));
        then
            echo "#FF0000"
        else
            echo "#FFFF00"
	fi
    fi
}

if [[ $API_KEY == "INSERT_API_KEY_HERE" ]];
then
    echo "You forgot to add an api key!" # short text
    echo "You forgot to add an api key!" # long text
    exit 0
fi

RESPONSE=$(curl -w "HTTPSTATUS:%{http_code}" -sH "API-Key: $API_KEY" https://api.vultr.com/v1/account/info)

BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')
STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

#echo $BODY
#echo $STATUS

if [[ $STATUS == "403" ]];
then
    echo "You have set an invalid API key!"
    echo "You have set an invalid API key!"
elif [[ $STATUS == "503" ]];
then
    echo "Excessive requests. Try again later."
    echo "Excessive requests. Try again later."
elif [[ $STATUS == "200" ]];
then
    bal=$(echo "$BODY" | jq ".balance" | sed -e 's/^"//' -e 's/"$//')
    pending=$(echo "$BODY" | jq ".pending_charges" | sed -e 's/^"//' -e 's/"$//')
    total=$(bc <<< "$bal + $pending")
    if [[ $BAL_MODE -eq "0" ]];
    then
        balance
    elif [[ $BAL_MODE -eq "1" ]];
    then
        invbalance
    fi
fi